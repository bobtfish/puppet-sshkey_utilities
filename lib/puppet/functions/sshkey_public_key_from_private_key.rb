# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Converts an ssh public key into it's fingerprint string, using ssh-keygen
#
#
#
Puppet::Functions.create_function(:'sshkey_public_key_from_private_key') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    require 'tempfile'
    unless args.length == 1 then
      raise Puppet::ParseError, ("sshkey_public_key_from_private_key(): wrong number of arguments (#{args.length}; must be 1)")
    end
    arg = args[0]
    unless arg.respond_to?('to_s') then
        raise Puppet::ParseError, ("#{arg.inspect} is not a string. It looks to be a #{arg.class}")
    end
    f = Tempfile.new('puppet-sshkey_utils')
    f.chmod 0400
    f.write "#{arg.to_s}\n"
    f.close
 
    truecmd = `which true`.chomp
    output=`sh -c 'SSH_ASKPASS=#{truecmd} DISPLAY=dummydisplay:0 setsid ssh-keygen -yf #{f.path}' </dev/null 2>&1`

    if $?.exitstatus != 0
      raise Puppet::ParseError, ("#{arg.inspect} is not a valid ssh key, ssh-keygen exited with #{$?.exitstatus}: #{output}")
    end

    output.split(' ')[1]
  
  end
end
